/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package cn.pedant.SweetAlert.test;

public final class R {
  public static final class anim {
    public static final int error_frame_in=0x7f010000;
    public static final int error_x_in=0x7f010001;
    public static final int modal_in=0x7f010002;
    public static final int modal_out=0x7f010003;
    public static final int success_bow_roate=0x7f010004;
    public static final int success_mask_layout=0x7f010005;
  }
  public static final class attr {
    /**
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int fromDeg=0x7f020000;
    /**
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int matProg_barColor=0x7f020001;
    /**
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int matProg_barSpinCycleTime=0x7f020002;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int matProg_barWidth=0x7f020003;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int matProg_circleRadius=0x7f020004;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int matProg_fillRadius=0x7f020005;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int matProg_linearProgress=0x7f020006;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int matProg_progressIndeterminate=0x7f020007;
    /**
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int matProg_rimColor=0x7f020008;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int matProg_rimWidth=0x7f020009;
    /**
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int matProg_spinSpeed=0x7f02000a;
    /**
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int pivotX=0x7f02000b;
    /**
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int pivotY=0x7f02000c;
    /**
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>x</td><td>0</td><td></td></tr>
     * <tr><td>y</td><td>1</td><td></td></tr>
     * <tr><td>z</td><td>2</td><td></td></tr>
     * </table>
     */
    public static final int rollType=0x7f02000d;
    /**
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int toDeg=0x7f02000e;
  }
  public static final class bool {
    public static final int isTab=0x7f030000;
  }
  public static final class color {
    public static final int blue_btn_bg_color=0x7f040000;
    public static final int blue_btn_bg_pressed_color=0x7f040001;
    public static final int button_text_color=0x7f040002;
    public static final int error_stroke_color=0x7f040003;
    public static final int float_transparent=0x7f040004;
    public static final int gray_btn_bg_color=0x7f040005;
    public static final int gray_btn_bg_pressed_color=0x7f040006;
    public static final int material_blue_grey_80=0x7f040007;
    public static final int material_blue_grey_90=0x7f040008;
    public static final int material_blue_grey_95=0x7f040009;
    public static final int material_deep_teal_20=0x7f04000a;
    public static final int material_deep_teal_50=0x7f04000b;
    public static final int red=0x7f04000c;
    public static final int red_btn_bg_color=0x7f04000d;
    public static final int red_btn_bg_pressed_color=0x7f04000e;
    public static final int success_stroke_color=0x7f04000f;
    public static final int sweet_dialog_bg_color=0x7f040010;
    public static final int text_color=0x7f040011;
    public static final int trans_success_stroke_color=0x7f040012;
    public static final int warning_stroke_color=0x7f040013;
    public static final int white=0x7f040014;
  }
  public static final class dimen {
    public static final int alert_width=0x7f050000;
    public static final int common_circle_width=0x7f050001;
    public static final int progress_circle_radius=0x7f050002;
  }
  public static final class drawable {
    public static final int blue_button_background=0x7f060000;
    public static final int cancel_icon=0x7f060001;
    public static final int dialog_background=0x7f060002;
    public static final int error_center_x=0x7f060003;
    public static final int error_circle=0x7f060004;
    public static final int gray_button_background=0x7f060005;
    public static final int red_button_background=0x7f060006;
    public static final int ronded_button_red_gradient=0x7f060007;
    public static final int rounded_border_button_blue=0x7f060008;
    public static final int success_bow=0x7f060009;
    public static final int success_circle=0x7f06000a;
    public static final int sucess_circle=0x7f06000b;
    public static final int warning_circle=0x7f06000c;
    public static final int warning_icon=0x7f06000d;
    public static final int warning_sigh=0x7f06000e;
  }
  public static final class id {
    public static final int cancel_button=0x7f070000;
    public static final int confirm_button=0x7f070001;
    public static final int content_text=0x7f070002;
    public static final int custom_image=0x7f070003;
    public static final int error_frame=0x7f070004;
    public static final int error_x=0x7f070005;
    public static final int loading=0x7f070006;
    public static final int mask_left=0x7f070007;
    public static final int mask_right=0x7f070008;
    public static final int progressWheel=0x7f070009;
    public static final int progress_dialog=0x7f07000a;
    public static final int success_frame=0x7f07000b;
    public static final int success_tick=0x7f07000c;
    public static final int title_text=0x7f07000d;
    public static final int warning_frame=0x7f07000e;
    public static final int x=0x7f07000f;
    public static final int y=0x7f070010;
    public static final int z=0x7f070011;
  }
  public static final class layout {
    public static final int alert_dialog=0x7f080000;
  }
  public static final class string {
    public static final int LOADING=0x7f090000;
    public static final int app_name=0x7f090001;
    public static final int default_progressbar=0x7f090002;
    public static final int dialog_cancel=0x7f090003;
    public static final int dialog_default_title=0x7f090004;
    public static final int dialog_ok=0x7f090005;
  }
  public static final class style {
    public static final int alert_dialog=0x7f0a0000;
    public static final int dialog_blue_button=0x7f0a0001;
  }
  public static final class styleable {
    /**
     * Attributes that can be used with a ProgressWheel.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ProgressWheel_matProg_barColor cn.pedant.SweetAlert.test:matProg_barColor}</code></td><td></td></tr>
     * <tr><td><code>{@link #ProgressWheel_matProg_barSpinCycleTime cn.pedant.SweetAlert.test:matProg_barSpinCycleTime}</code></td><td></td></tr>
     * <tr><td><code>{@link #ProgressWheel_matProg_barWidth cn.pedant.SweetAlert.test:matProg_barWidth}</code></td><td></td></tr>
     * <tr><td><code>{@link #ProgressWheel_matProg_circleRadius cn.pedant.SweetAlert.test:matProg_circleRadius}</code></td><td></td></tr>
     * <tr><td><code>{@link #ProgressWheel_matProg_fillRadius cn.pedant.SweetAlert.test:matProg_fillRadius}</code></td><td></td></tr>
     * <tr><td><code>{@link #ProgressWheel_matProg_linearProgress cn.pedant.SweetAlert.test:matProg_linearProgress}</code></td><td></td></tr>
     * <tr><td><code>{@link #ProgressWheel_matProg_progressIndeterminate cn.pedant.SweetAlert.test:matProg_progressIndeterminate}</code></td><td></td></tr>
     * <tr><td><code>{@link #ProgressWheel_matProg_rimColor cn.pedant.SweetAlert.test:matProg_rimColor}</code></td><td></td></tr>
     * <tr><td><code>{@link #ProgressWheel_matProg_rimWidth cn.pedant.SweetAlert.test:matProg_rimWidth}</code></td><td></td></tr>
     * <tr><td><code>{@link #ProgressWheel_matProg_spinSpeed cn.pedant.SweetAlert.test:matProg_spinSpeed}</code></td><td></td></tr>
     * </table>
     * @see #ProgressWheel_matProg_barColor
     * @see #ProgressWheel_matProg_barSpinCycleTime
     * @see #ProgressWheel_matProg_barWidth
     * @see #ProgressWheel_matProg_circleRadius
     * @see #ProgressWheel_matProg_fillRadius
     * @see #ProgressWheel_matProg_linearProgress
     * @see #ProgressWheel_matProg_progressIndeterminate
     * @see #ProgressWheel_matProg_rimColor
     * @see #ProgressWheel_matProg_rimWidth
     * @see #ProgressWheel_matProg_spinSpeed
     */
    public static final int[] ProgressWheel={
        0x7f020001, 0x7f020002, 0x7f020003, 0x7f020004, 
        0x7f020005, 0x7f020006, 0x7f020007, 0x7f020008, 
        0x7f020009, 0x7f02000a
      };
    /**
     * <p>This symbol is the offset where the {@link cn.pedant.SweetAlert.test.R.attr#matProg_barColor}
     * attribute's value can be found in the {@link #ProgressWheel} array.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name cn.pedant.SweetAlert.test:matProg_barColor
     */
    public static final int ProgressWheel_matProg_barColor=0;
    /**
     * <p>This symbol is the offset where the {@link cn.pedant.SweetAlert.test.R.attr#matProg_barSpinCycleTime}
     * attribute's value can be found in the {@link #ProgressWheel} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name cn.pedant.SweetAlert.test:matProg_barSpinCycleTime
     */
    public static final int ProgressWheel_matProg_barSpinCycleTime=1;
    /**
     * <p>This symbol is the offset where the {@link cn.pedant.SweetAlert.test.R.attr#matProg_barWidth}
     * attribute's value can be found in the {@link #ProgressWheel} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name cn.pedant.SweetAlert.test:matProg_barWidth
     */
    public static final int ProgressWheel_matProg_barWidth=2;
    /**
     * <p>This symbol is the offset where the {@link cn.pedant.SweetAlert.test.R.attr#matProg_circleRadius}
     * attribute's value can be found in the {@link #ProgressWheel} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name cn.pedant.SweetAlert.test:matProg_circleRadius
     */
    public static final int ProgressWheel_matProg_circleRadius=3;
    /**
     * <p>This symbol is the offset where the {@link cn.pedant.SweetAlert.test.R.attr#matProg_fillRadius}
     * attribute's value can be found in the {@link #ProgressWheel} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name cn.pedant.SweetAlert.test:matProg_fillRadius
     */
    public static final int ProgressWheel_matProg_fillRadius=4;
    /**
     * <p>This symbol is the offset where the {@link cn.pedant.SweetAlert.test.R.attr#matProg_linearProgress}
     * attribute's value can be found in the {@link #ProgressWheel} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name cn.pedant.SweetAlert.test:matProg_linearProgress
     */
    public static final int ProgressWheel_matProg_linearProgress=5;
    /**
     * <p>This symbol is the offset where the {@link cn.pedant.SweetAlert.test.R.attr#matProg_progressIndeterminate}
     * attribute's value can be found in the {@link #ProgressWheel} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name cn.pedant.SweetAlert.test:matProg_progressIndeterminate
     */
    public static final int ProgressWheel_matProg_progressIndeterminate=6;
    /**
     * <p>This symbol is the offset where the {@link cn.pedant.SweetAlert.test.R.attr#matProg_rimColor}
     * attribute's value can be found in the {@link #ProgressWheel} array.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name cn.pedant.SweetAlert.test:matProg_rimColor
     */
    public static final int ProgressWheel_matProg_rimColor=7;
    /**
     * <p>This symbol is the offset where the {@link cn.pedant.SweetAlert.test.R.attr#matProg_rimWidth}
     * attribute's value can be found in the {@link #ProgressWheel} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name cn.pedant.SweetAlert.test:matProg_rimWidth
     */
    public static final int ProgressWheel_matProg_rimWidth=8;
    /**
     * <p>This symbol is the offset where the {@link cn.pedant.SweetAlert.test.R.attr#matProg_spinSpeed}
     * attribute's value can be found in the {@link #ProgressWheel} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name cn.pedant.SweetAlert.test:matProg_spinSpeed
     */
    public static final int ProgressWheel_matProg_spinSpeed=9;
    /**
     * Attributes that can be used with a Rotate3dAnimation.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Rotate3dAnimation_fromDeg cn.pedant.SweetAlert.test:fromDeg}</code></td><td></td></tr>
     * <tr><td><code>{@link #Rotate3dAnimation_pivotX cn.pedant.SweetAlert.test:pivotX}</code></td><td></td></tr>
     * <tr><td><code>{@link #Rotate3dAnimation_pivotY cn.pedant.SweetAlert.test:pivotY}</code></td><td></td></tr>
     * <tr><td><code>{@link #Rotate3dAnimation_rollType cn.pedant.SweetAlert.test:rollType}</code></td><td></td></tr>
     * <tr><td><code>{@link #Rotate3dAnimation_toDeg cn.pedant.SweetAlert.test:toDeg}</code></td><td></td></tr>
     * </table>
     * @see #Rotate3dAnimation_fromDeg
     * @see #Rotate3dAnimation_pivotX
     * @see #Rotate3dAnimation_pivotY
     * @see #Rotate3dAnimation_rollType
     * @see #Rotate3dAnimation_toDeg
     */
    public static final int[] Rotate3dAnimation={
        0x7f020000, 0x7f02000b, 0x7f02000c, 0x7f02000d, 
        0x7f02000e
      };
    /**
     * <p>This symbol is the offset where the {@link cn.pedant.SweetAlert.test.R.attr#fromDeg}
     * attribute's value can be found in the {@link #Rotate3dAnimation} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name cn.pedant.SweetAlert.test:fromDeg
     */
    public static final int Rotate3dAnimation_fromDeg=0;
    /**
     * <p>This symbol is the offset where the {@link cn.pedant.SweetAlert.test.R.attr#pivotX}
     * attribute's value can be found in the {@link #Rotate3dAnimation} array.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name cn.pedant.SweetAlert.test:pivotX
     */
    public static final int Rotate3dAnimation_pivotX=1;
    /**
     * <p>This symbol is the offset where the {@link cn.pedant.SweetAlert.test.R.attr#pivotY}
     * attribute's value can be found in the {@link #Rotate3dAnimation} array.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name cn.pedant.SweetAlert.test:pivotY
     */
    public static final int Rotate3dAnimation_pivotY=2;
    /**
     * <p>This symbol is the offset where the {@link cn.pedant.SweetAlert.test.R.attr#rollType}
     * attribute's value can be found in the {@link #Rotate3dAnimation} array.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>x</td><td>0</td><td></td></tr>
     * <tr><td>y</td><td>1</td><td></td></tr>
     * <tr><td>z</td><td>2</td><td></td></tr>
     * </table>
     *
     * @attr name cn.pedant.SweetAlert.test:rollType
     */
    public static final int Rotate3dAnimation_rollType=3;
    /**
     * <p>This symbol is the offset where the {@link cn.pedant.SweetAlert.test.R.attr#toDeg}
     * attribute's value can be found in the {@link #Rotate3dAnimation} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name cn.pedant.SweetAlert.test:toDeg
     */
    public static final int Rotate3dAnimation_toDeg=4;
  }
}